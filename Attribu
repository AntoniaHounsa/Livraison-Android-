
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

[TestFixture]
public class StartAndEndDatesCoherenceAttributeTests
{
    private ValidationContext GetContext(object instance) =>
        new ValidationContext(instance, null, null);

    [Test]
    public void When_dates_are_null_it_returns_success()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = null,
            EndDate = null
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.True);
    }

    [Test]
    public void When_startdate_is_invalid_string_it_returns_success()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = "not-a-date",
            EndDate = "2025-01-01"
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.True);
    }

    [Test]
    public void When_enddate_is_invalid_string_it_returns_success()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = "2025-01-01",
            EndDate = "abc"
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.True);
    }

    [Test]
    public void When_start_is_before_end_it_returns_success()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = "2025-01-01",
            EndDate = "2025-12-31"
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.True);
    }

    [Test]
    public void When_start_equals_end_it_returns_success()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = "2025-01-01",
            EndDate = "2025-01-01"
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.True);
    }

    [Test]
    public void When_start_is_after_end_it_returns_error()
    {
        var model = new ReadVoteRequestMapper
        {
            StartDate = "2025-12-31",
            EndDate = "2025-01-01"
        };

        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        Assert.That(isValid, Is.False);
        Assert.That(results, Has.Count.EqualTo(1));
        Assert.That(results[0].ErrorMessage, Does.Contain("Date")); // ou ValidationMessages.InvalidDates si tu lâ€™as mis
    }
}





xxxxxx


using NUnit.Framework;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

[TestFixture]
public class EnumValidationAttributeTests
{
    private ValidationContext GetContext(object instance) =>
        new ValidationContext(instance, null, null);

    [Test]
    public void DateOrder_is_null_returns_success()
    {
        // Arrange
        var model = new VoteFilter { DateOrder = null };

        // Act
        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        // Assert
        Assert.That(isValid, Is.True);
        Assert.That(results, Is.Empty);
    }

    [Test]
    public void DateOrder_is_valid_enum_value_returns_success()
    {
        // Arrange
        var model = new VoteFilter { DateOrder = "ASC" };

        // Act
        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        // Assert
        Assert.That(isValid, Is.True);
        Assert.That(results, Is.Empty);
    }

    [Test]
    public void DateOrder_is_invalid_enum_value_returns_error()
    {
        // Arrange
        var model = new VoteFilter { DateOrder = "WRONG" };

        // Act
        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        // Assert
        Assert.That(isValid, Is.False);
        Assert.That(results, Has.Count.EqualTo(1));
        Assert.That(results[0].ErrorMessage, Does.Contain("DateOrder must be one of the enum values"));
    }

    [Test]
    public void DateOrder_is_case_insensitive_returns_success()
    {
        // Arrange
        var model = new VoteFilter { DateOrder = "desc" }; // minuscule

        // Act
        var results = new List<ValidationResult>();
        var isValid = Validator.TryValidateObject(model, GetContext(model), results, true);

        // Assert
        Assert.That(isValid, Is.True);
    }
}




xxxxxxxxxxxxxx

using NUnit.Framework;
using System;
using System.ComponentModel.DataAnnotations;

[TestFixture]
public class DateTimeValidationAttributeTests
{
    private DateTimeValidationAttribute _attribute;
    private ValidationContext _context;

    [SetUp]
    public void SetUp()
    {
        _attribute = new DateTimeValidationAttribute
        {
            ErrorMessage = "{0} must be a valid date"
        };
        _context = new ValidationContext(new { }, null, null)
        {
            DisplayName = "TestProperty"
        };
    }

    [Test]
    public void IsValid_returns_success_if_value_is_null()
    {
        // Act
        var result = _attribute.GetValidationResult(null, _context);

        // Assert
        Assert.That(result, Is.EqualTo(ValidationResult.Success));
    }

    [Test]
    public void IsValid_returns_success_if_value_is_valid_date_string()
    {
        // Act
        var result = _attribute.GetValidationResult("2025-09-25", _context);

        // Assert
        Assert.That(result, Is.EqualTo(ValidationResult.Success));
    }

    [Test]
    public void IsValid_returns_error_if_value_is_invalid_date_string()
    {
        // Act
        var result = _attribute.GetValidationResult("not-a-date", _context);

        // Assert
        Assert.That(result, Is.Not.EqualTo(ValidationResult.Success));
        Assert.That(result.ErrorMessage, Does.Contain("TestProperty must be a valid date"));
    }

    [Test]
    public void IsValid_returns_error_if_value_is_not_a_string()
    {
        // Act
        var result = _attribute.GetValidationResult(123, _context);

        // Assert
        Assert.That(result, Is.Not.EqualTo(ValidationResult.Success));
        Assert.That(result.ErrorMessage, Does.Contain("TestProperty must be a valid date"));
    }
}


ReadVoteStatistics

[Test]
public void ReadVoteStatistics_it_returns_stats_and_calls_verifier()
{
    // Arrange
    var logic = GetVoteLogic();
    var stats = new VoteStatisticsDTO();
    _voteStoreMock
        .Setup(s => s.GetVoteStatistics(It.IsAny<Vote>()))
        .Returns(stats);

    _voteVerifierMock
        .Setup(v => v.ThrowIfEntityNotFound(stats, It.IsAny<string>()))
        .Verifiable();

    // Act
    var result = logic.ReadVoteStatistics("http://site");

    // Assert
    Assert.That(result, Is.SameAs(stats));
    _voteStoreMock.Verify(s => s.GetVoteStatistics(It.Is<Vote>(v => v.Url == "http://site")), Times.Once);
    _voteVerifierMock.Verify(v => v.ThrowIfEntityNotFound(stats, It.Is<string>(s => s.Contains("http://site"))), Times.Once);
    _pftILoggerMock.Verify(l => l.LogException(It.IsAny<Exception>()), Times.Never);
}

[Test]
public void ReadVoteStatistics_it_throws_when_verifier_detects_not_found()
{
    // Arrange
    var logic = GetVoteLogic();

    _voteStoreMock
        .Setup(s => s.GetVoteStatistics(It.IsAny<Vote>()))
        .Returns((VoteStatisticsDTO)null);

    var notFound = new KeyNotFoundException("Not found");
    _voteVerifierMock
        .Setup(v => v.ThrowIfEntityNotFound(null, It.IsAny<string>()))
        .Throws(notFound);

    // Act
    var ex = Assert.Throws<KeyNotFoundException>(() => logic.ReadVoteStatistics("missing"));

    // Assert
    Assert.That(ex, Is.SameAs(notFound));
    _pftILoggerMock.Verify(l => l.LogException(It.IsAny<Exception>()), Times.Never);
}

[Test]
public void ReadVoteStatistics_it_logs_and_rethrows_when_store_throws()
{
    // Arrange
    var logic = GetVoteLogic();
    var boom = new TimeoutException("slow db");

    _voteStoreMock
        .Setup(s => s.GetVoteStatistics(It.IsAny<Vote>()))
        .Throws(boom)
