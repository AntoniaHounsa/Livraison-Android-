
import { Subscription } from 'rxjs';

export class WeboDocumentationComponent implements OnInit, OnDestroy {
  loadedDoc: LoadedDocumentation | null = null;
  breadcrumbs: DocumentationMeta[] = [];
  private sub = new Subscription();

  constructor(
    private documentationService: DocumentationService,
    private drawerService: DrawerService
  ) {}

  ngOnInit(): void {
    // ✅ NE TOUCHE PAS au reste de ton init
    // ⬇️ AJOUT MINIMAL : on attend ready$, puis on écoute le state
    this.sub.add(
      this.documentationService.ready$.subscribe(() => {
        // prêt → écouter les changements d’état du drawer
        this.sub.add(
          this.drawerService.drawerStateEvents$.subscribe(drawerState => {
            // logs safe (aide au debug sans casser)
            console.log('[doc] state:', drawerState);

            // si fermé ou id absent → on nettoie l’affichage
            if (!drawerState.documentationIsOpened || !drawerState.documentationId) {
              this.loadedDoc = null;
              this.breadcrumbs = [];
              return;
            }

            const id = drawerState.documentationId;

            // recharge le contenu
            this.documentationService.loadById$(id).subscribe(doc => {
              this.loadedDoc = doc;
              console.log('[doc] loaded:', id);
            });

            // recharge le fil d’Ariane
            this.documentationService.trailFromId$(id).subscribe(trail => {
              this.breadcrumbs = trail;
            });
          })
        );
      })
    );
  }

  ngOnDestroy(): void {
    this.sub.unsubscribe(); // ← propre, n’impacte rien d’autre
  }

  // garde bien une ARROW FUNCTION pour éviter "this" perdu
  openById = (id: DocumentationIds) => {
    this.drawerService.open(id); // ou toggle(true, id) si ça met bien à jour docId
  };
}
